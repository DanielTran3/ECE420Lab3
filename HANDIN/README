README:

To make program:
Run the make command with the following different arguments:
	-> make gje_seq          ---- Makes sequential program
	-> make gje_parallel     ---- Makes simple parallel program
	-> make gje_parallel2    ---- Makes optimized version of parallel program
	-> make gje_taskfunction ---- Makes task version of parallel program
	-> make gje_sections     ---- Makes sections version of parallel program
	-> make all              ---- Makes all executables above

To run program:
	-> ./gje_seq                      ------ (No arguments reguired)
	-> ./gje_parallel threadcount     ------ (Thread count argument required)
	-> ./gje_parallel2 threadcount    ------ (Thread count argument required)
	-> ./gje_taskfunction threadcount ------ (Thread count argument required)
	-> ./gje_sections threadcount     ------ (Thread count argument required)

*Please ensure that a file called data_input is present in directory to run correctly

Information:

gje_seq - Is a sequential version of the Gaussian Jordan elimination used to solve linear systems

gje_parallel - Is a basic parallel version of the Gaussian Jordan elimination used to solve linear systems. At the given points where parallelization can happen, new teams are created each time

gje_parallel2 - Is a optimized parallel version of the Gaussian Jordan elimination used to solve linear systems. At the given points where parallelization can happen, we check if teams can be reused before creating new teams. As well as the use of scheduling (guided) with a chunk size of 1 for optimal performance.

gje_taskfunction - Is a task parallel implementation version of the Gaussian Jordan elimination used to solve linear systems. At the given points where parallelization can happen, we create tasks to be used by the teams.

gje_sections - Is a section parallel implementation version of the Gaussian Jordan elimination used to solve linear systems. At the given points where parallelization can happen, we create sections to be used by the teams.

We created different implementations of OpenMP to show the different speed, advantages, disadvantages, and comparsions of each especially in comparsion to the sequential version. We also look deeper into the how varying threads and matrix size affects performance.
